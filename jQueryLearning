jQuery Learning
git clone https://youngdze@bitbucket.org/wtao/baxteracevideopage.git

# $(selector).api()
# http://bit.ly/1loefaY

04-10-2014

// speed = slow,fast,normal,millisecond

隐藏			    	hide(speed,callback)
显示		    		show(speed,callback)
切换显示隐藏			toggle(speed,callback)
淡入				    fadeIn(speed,callback)
淡出			    	fadeOut(speed,callback)
切换淡入淡出			fadeToggle(speed,callback)
渐变为指定不透明度		fadeTo(speed,opacity,callback)
滑动显示		    	slideDown(speed,callback)
滑动隐藏			    slideUp(speed,callback)
切换上面两个			slideToggle(speed,callback)
创建自定义动画			animate(style,speed,easing,callback)

$("button").click(function(){
  $("div").animate({
    left:"200px",
    opacity:"0.5",
    height:"-150px",
    width:"+150px",
    color:"toggle"
  },"slow");
});

$("button").click(function(){
  var div=$("div");
  div.animate({height:'300px',opacity:'0.4'},"slow");
  div.animate({width:'300px',opacity:'0.8'},"slow");
  div.animate({height:'100px',opacity:'0.4'},"slow");
  div.animate({width:'100px',opacity:'0.8'},"slow");
});

停止动画	    		stop(stopAll(true/flase),goToEnd(true/false))
设置 css		    	css("propertyname","value")
设置多个 css			css({"propertyname":"value","propertyname":"value",...})
改变高度		    	height(length)/height(function(index,oldheight))
改变宽度		    	width(length)/width(function(index,oldwidth))
元素相对文档位置		offset()/offset(value)			// value => {top:100,left:0}

$(".btn1").click(function(){
  x=$("p").offset();
  $("#span1").text(x.left);
  $("#span2").text(x.top);
});

方法链接(Chaining)

$("#p1").css("color","red")
  .slideUp(2000)
  .slideDown(2000);

设置或返回文本内容		    text(text)
设置返回 HTML			    html()
设置返回表单值		    	val()
获取特定属性值		    	attr(attribute,value)
attr 回调函数			    attr(attribute,callback)
在结尾插入文本			    append()
在开头插入文本		    	prepend()
在之后插入元素			    after()
在之前插入元素		    	before()
删除被选元素			    remove()/remove(filter)			// 过滤如 remove(".italic")
删除被选元素子元素	    	empty()
添加 css 类		    	    addClass(className)
移除 css 类 			    removeClass(className)
添加移除 css 类		    	toggleClass(className)
设置或返回纯宽度    		width()
设置或返回纯高度		    height()
包括内边距	    	    	innerWidth() & innerHeight()
包括内边距和边框    		outerHeight() & outerWidth()
取得文档     		    	$(document)
取得窗口	    		    $(window)

04-11-2014

返回直接父元素			    parent()
返回所有祖先元素	    	parents()
过滤出 ul		    	    parents("ul")
返回之间祖先元素		    parentsUtil(tag)
返回直接子元素              children()                      // 筛选 children("p .class")
返回被选元素后代元素        find(attribute/*)
返回被选元素所有同胞        siblings(attribute)             // 不包括本元素
返回下一个同胞元素          next()                          // prev()
返回所有跟随同胞元素        nextAll()                       // prevAll()
返回之间同胞元素            nextUntil()                     // prevUntil()
返回被选元素首个元素        $("selector").first()           // last()
返回指定索引号元素          eq(index)                       // 从 0 开始
返回不匹配元素              not(selector)
过滤出来                    filter(selector)

$("div").filter(".middle").css("border-color","red")

AJAX 加载外部文件           $(selector).load(URL,data,callback)

$("button").click(function(){
  $("#div1").load("demo_test.txt",function(responseTxt,statusTxt,xhr){
    if(statusTxt=="success")
      alert("外部内容加载成功！");
    if(statusTxt=="error")
      alert("Error: "+xhr.status+": "+xhr.statusText);
  });
});

AJAX HTTP GET 请求数据      $.get(URL,callback)

$("button").click(function(){
  $.get("demo_test.asp",function(data,status){
    alert("Data: " + data + "\nStatus: " + status);
  });
});

AJAX HTTP POST 请求数据     $.post(URL,data,callback)
释放 $ 标识符控制           $.noConflict();
用全名使用 jQuery           jQuery(document).ready(function(){};);
创建自己的简写              var jq = $.noConflict()
在文档结束之前阻止代码运行  $(document).ready()

// jQuery 不是 W3C 标准

04-12-2014

scroll 方法                 $(selector).scroll(function)

$("div").scroll(function() {
  $("span").text(x+=1);
});

返回设置匹配滚动条垂直位置  $(selector).scrollTop(offset)
返回设置匹配滚动条水平位置  $(selector).scrollLeft(position)
返回设置最近祖先元素        $(selector).offsetParent()              // 返回 left & top

返回相对父元素位置(第一个)  $(selector).position()

04-16-2014

调整浏览器窗口大小发生 resize 事件              $(selector).resize()
加载 xml                                        $.get/post("sample.xml")
为每个匹配元素运行函数                          $(selector).each(function(index,element))
将元素添加到匹配元素集合中                      $(selector).add(selecotr/elements/html/jQueryObject/selector,context)
结束当前链条返回之前元素                        .end()              // 即是省略了新选择直接进行了，也可以视为关闭代码块
检测是否包含元素(select/false)                  .has(selecotr)
匹配元素指定 index 的                           $(selector).eq(index)

HTML DOM 常用属性 nodeType 值

04-17-2014

匹配元素集合中每个元素子节点                    $("selector").contents()
以上需要具体处理还得过滤元素                    $("selecotr").filter(function(){return this.nodeType!=1;)}
把每个被选元素放在指定HTML内容或元素中          $(selector).wrap(wrapper)
删除被选元素父元素(与上面连用)                  $(selector).unwrap()

$('button').toggle(function() {
    $('p').wrap('<div></div>');           
},function() {
    $('p').unwrap();
});

选择匹配元素第一个                              $(selector).first().addClass('class');
选择匹配元素最后一个                            $(selector).last().removeClass('class');
处理 jquery 封装数组成基础数组                  .get().join('|')
传递每个元素生成包含返回值jquery对象            .map(collback(index,domElement))
检查是否包含某元素，返回 true/false             var isFormParent = $("input[type='checkbox']").parent().is("form");
输出被 jQuery 选择器匹配的元素数量              $(selector).size()
获得由选择器指定的 DOM 元素                     $(selector).get(index(from 0))

$('button').click(function(){
    x=$('p').get(1);
    $('div').text(x.nodeName+": "+x.innerHTML);
});

返回指定元素相对其他指定元素的 index 位置       $(selector).index()         // $("li").index()
返回相对与选择器的 index 位置                   $(selector).index(element)  // $('li').index("$('#d'))
以数组形式返回选择的元素                        alert($('li').toArray().join('|'))

04-19-2014

添加一个或多个事件处理程序并运行函数            $(selector).bind(event,data,function)
同上                                            $(selector).bind({event:function,event:function, ...})

04-20-2014

当输入发生变化时触发(input)                     $(selector).change(function)
在指定时间后进行                                $(selector).slideUp().delay(800).fadeIn();

05-04-2014

启动载入                                        $(window).load(function)

05-14-2014

=========== extend 和 fn.extend 区别 ============

/* jQuery 为开发插件提供了两个方法:
 * $.extend(obj)                       为了扩展jQuery 本身, 为类添加新的方法
 * $.fn.extend(obj)                    给 jQuery 对象添加方法
 */

// $.fn 中的 fn 是 prototype, 即 $.fn = $.prototype

$.extend({
  add: function(a,b) {
    return a+b;
  }
});
$.add(5,8)      // return 13

// $.fn.extend(obj) 对 prototype 进行扩展, 为 jQuery 类添加成员函数, jQuery 类的实例可以使用这个成员函数。

$.fn.extend({
  clickwhile: function() {
    $(this).click(function(){
      alert($(this).val());    
    });
  }            
});
$("input").clickwhile();        // alert this.value

=================================================

// jQuery 对象: $("input")

为事件触发动作                          $(selector).live(events, data, handler)     // addEventListener/attachEvent
移除所有绑定事件                        $(selector).die()
移除特定绑定事件所有动作                $(selector).die("click")
移除特定绑定事件特定动作                $(selector).die("click", foo)
把指定元素摘下来接到指定元素后面        $(selector).appendTo(selector)              // selector 可换为 "<p>Test</p>"

05-26-2014

把一个对象合并到另一个对象中            $.extend(target[, object1][, objectN])      // 同名则后者替换前者
迭代器                                  $.each(collection, callback(indexInArray, valueOfElement))

========================= $.each ========================

$.each([ 52, 97 ], function( index, value ) {
  alert( index + ": " + value );
});

// 0:52
// 1:97

var obj = {
  "flammable": "inflammable",
  "duh": "no duh"
};
$.each( obj, function( key, value ) {
  alert( key + ": " + value );
});

// flammable: inflammable 
// flammable: inflammable 
duh: no duhduh: no duh

=========================================================

释放 $ 标识符                           $.noConflict(); jQuery(function(){});
自定义标识符                            var jq = $.noConflict();
在函数内部使用 $                        $.noConflict();
                                        jQuery(function($){ $('button').alert(); });
添加全局函数 (Method One)               jQuery.foo = function(){};
添加全局函数 (Method Two)               jQuery.extend(object);

======================= jQuery.extend(object) ====================

jQuery.extend({

  foo: function() {
    alert("Hello world");
  },

  bar: function() {
    alert("Bar");
  } 
            
});

==================================================================

// 避免命名冲突使用闭包

添加对象级别插件 (Method One)           (function($){ jQuery.fn.extend(object); })(jQuery);
添加对象级别插件 (Method Two)           (function($){ jQuery.fn.pluginName=function(){}; })(jQuery);

06-03-2014

获取元素相对顶部距离                    $(selector).offset().top;

06-17-2014

======================= AJAX Example =========================

$(function(){
  $.get('example.php', function(data) {
    if(data.errors != null) {
      alert("There was an error!");
    } else {
      $("#content").text(data.message);
    }
  }, 'json');            
})

// in CoffeeScript

$ ->
  $.get 'example.php', (data) ->
    if data.errors?
      alert "There was an error!"
    else
      $("#content").text data.message
  , 'json'

==============================================================

06-19-2014

获取窗口高宽                                        $(window).width()/height()

========================== 居中插件 ==========================

(function($){

  $.fn.middleIt = function(options) {
    var left_spacing = 0, top_spacing = 0;
    $(this).each(function(){
      if(options || options == 0)
        top_spacing = options;
      else
        top_spacing = ($(this).parent().height() - $(this).height())/2;
      left_spacing = ($(this).parent().width() - $(this).width())/2;
      
      $(this).attr("style","position:absolute; top:"+top_spacing+"px;left:"+left_spacing+"px");
    });
  };

})(jQuery);

## CoffeeScript

do ($=jQuery) ->
  $.fn.middleIt = (options) ->
    $(@).each ->
      if options?
        top_spacing = options
      else
        top_spacing = ($(@).parent().height() - $(@).height())/2;

      left_spacing = ($(@).parent().width() - $(@).width())/2;

      $(@).attr
        "style":"position:absolute; top:#{top_spacing}px;left:#{left_spacing}px"

==============================================================

=============== height & innerHeight & outerHeight ===================

//  http://t.cn/Rv0mIik 

height:高度                     # height
innerHeight:高度＋补白          # height + padding + margin
outerHeight:高度＋补白＋边框，参数为true时：高度＋补白＋边框＋边距      # height + padding + margin + border
 
html代码： 
<div class="width: 150px;height:20px;float: left;border: 2px solid red;margin: 10px;margin: 10px;padding: 10px;" id="test">jjjjj</div> 
js代码： 
alert($("#test").height()); 
alert($("#test").innerHeight()); 
alert($("#test").outerHeight()); 
alert($("#test").outerHeight(true)); 
结果： 
在ie中的结果：17px，37px，41px，61px 
在ff中的结果：20px，40px，44px，64px 
 
html代码： 
<div class="width: 150px;height: 41px;float: left;border: 2px solid red;margin: 10px;margin: 10px;padding: 10px;" id="test">jjjjj</div> 
js代码： 
alert($("#test").height()); 
alert($("#test").innerHeight()); 
alert($("#test").outerHeight()); 
alert($("#test").outerHeight(true)); 
结果： 
在ie中的结果：17px，37px，41px，61px 
在ff中的结果：41px，61px，65px，85px 
 
html代码： 
<div class="width: 150px;height: 42px;float: left;border: 2px solid red;margin: 10px;margin: 10px;padding: 10px;" id="test">jjjjj</div> 
js代码： 
alert($("#test").height()); 
alert($("#test").innerHeight()); 
alert($("#test").outerHeight()); 
alert($("#test").outerHeight(true)); 
结果： 
在ie中的结果：18px，38px，42px，62px 
在ff中的结果：42px，62px，66px，86px 
 
html代码： 
<div class="width: 150px;height: 60px;float: left;border: 2px solid red;margin: 10px;margin: 10px;padding: 10px;" id="test">jjjjj</div> 
js代码： 
alert($("#test").height()); 
alert($("#test").innerHeight()); 
alert($("#test").outerHeight()); 
alert($("#test").outerHeight(true)); 
结果： 
在ie中的结果：36px，56px，60px，80px 
在ff中的结果：60px，80px，84px，104px 
 
结论：在ie中height包含border和padding并且height最小值为17px ，同理可得width，不过它最小值为15px

======================================================================

返回当前距离页面顶端距离                                $(window).scrollTop();
设置当前距离页面顶端距离                                $(window).scrollTop(200);
返回当前距离页面底部距离                                $(window).scrollBottom();
返回页面总高度                                          $('body'/document).height()

06-26-2014

获取 selected/async/autofocus/selected                  $("input[type='checkbox']").prop()          // 返回 true/false, 应对 attr() 时 checked 无值情况

